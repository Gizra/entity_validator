<?php

/**
 * @file
 * Progrmatically validate entities.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function entity_validator_ctools_plugin_type() {
  $plugins['validator'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Include CTools plugins and get all entity validator plugins.
 *
 * @return array
 *   All plugins relate to entity validator.
 */
function entity_validator_get_validator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator');
}

/**
 * Include CTools plugins and get the specified entity validator plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for entity validator.
 */
function entity_validator_get_validator_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator', $plugin_name);
}

/**
 * Return the validation handler based on entity type and bundle.
 *
 * @param $entity_type
 *  The entity type.
 * @param $bundle
 *  The bundle name.
 *
 * @return AbstractEntityValidate | NULL
 *  The handler object if found, or NULL.
 */
function entity_validator_get_validator_handler($entity_type, $bundle) {
  $plugin_name = $entity_type . ':' . $bundle;
  $plugin = entity_validator_get_validator_plugin($plugin_name);
  $class = ctools_plugin_load_class('entity_validator', 'validator', $plugin_name, 'class');
  $handler = new $class($plugin);
  return $handler;
}
