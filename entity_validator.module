<?php

/**
 * @file
 * Programmatically validate entities.
 */


/**
 * Validate an entity.
 *
 * This is a wrapper function that should be called by other modules in order
 * to validate entities created programmatically.
 *
 * @param $entity_type
 *  The entity type.
 * @param $entity
 *  The entity object.
 * @param $silent
 *  Determine if we throw the exception or return array with the errors.
 *  Defaults to FALSE.
 * @param $squash
 *   If TRUE, the message and params would be squashed to a single message. If
 *   FALSE it will keep the "message" and "params" separated. Defaults to
 *   TRUE.
 *
 * @throws EntityValidatorException
 * @return Boolean | NULL
 *  TRUE or FALSE will be returned if the handler exists and entity is valid,
 *  otherwise NULL.
 */
function entity_validator_validate_entity($entity_type, $entity, $silent = FALSE, $squash = TRUE) {
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);

  if (!$handler = entity_validator_get_validator_handler($entity_type, $bundle)) {
    // No handler found.
    return;
  }

  if (!$silent) {
    return $handler->validate($entity);
  }

  $handler->validate($entity, TRUE);
  return $handler->getErrors($squash);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function entity_validator_ctools_plugin_type() {
  $plugins['validator'] = array(
    'classes' => array('class'),
    'process' => 'entity_validator_plugin_process',
  );
  $plugins['validator']['child plugins'] = TRUE;

  return $plugins;
}

/**
 * Add defaults values to the validator plugins.
 *
 * Properties for the "validator" plugin type:
 * - name: Set the name based on the entity type and bundle.
 * - description: The description of the plugin. Defaults to empty string.
 * - options: Array of options needed for the plugin.
 */
function entity_validator_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
  );
}
/**
 * Include CTools plugins and get all entity validator plugins.
 *
 * @return array
 *   All plugins relate to entity validator.
 */
function entity_validator_get_validator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator');
}

/**
 * Include CTools plugins and get the specified entity validator plugin.
 *
 * @param string $plugin_name
 *  If provided this function only returns the selected plugin.
 *
 * @return array
 *  The selected plugin for entity validator.
 */
function entity_validator_get_validator_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator', $plugin_name);
}

/**
 * Return the validation handler based on entity type and bundle.
 *
 * @param $entity_type
 *  The entity type.
 * @param $bundle
 *  The bundle name.
 *
 * @return EntityValidateInterface | NULL
 *  The handler object if found, or NULL.
 */
function entity_validator_get_validator_handler($entity_type, $bundle) {
  $plugin_name = $entity_type . '__' . $bundle;
  $plugin = entity_validator_get_validator_plugin($plugin_name);

  if (!$class = ctools_plugin_load_class('entity_validator', 'validator', $plugin_name, 'class')) {
    return NULL;
  }

  $handler = new $class($plugin);
  return $handler;
}
