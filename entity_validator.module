<?php

/**
 * @file
 * Programmatically validate entities.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function entity_validator_ctools_plugin_type() {
  $plugins['validator'] = array(
    'classes' => array('class'),
    'process' => 'entity_validator_plugin_process',
  );
  $plugins['validator']['child plugins'] = TRUE;

  return $plugins;
}

/**
 * Add defaults values to the validator plugins.
 *
 * Properties for the "validator" plugin type:
 * - name: Set the name based on the entity type and bundle.
 * - description: The description of the plugin. Defaults to empty string.
 * - options: Array of options needed for the plugin.
 */
function entity_validator_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
  );
}
/**
 * Include CTools plugins and get all entity validator plugins.
 *
 * @return array
 *   All plugins relate to entity validator.
 */
function entity_validator_get_validator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator');
}

/**
 * Include CTools plugins and get the specified entity validator plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for entity validator.
 */
function entity_validator_get_validator_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('entity_validator', 'validator', $plugin_name);
}

/**
 * Return the validation handler based on entity type and bundle.
 *
 * @param $entity_type
 *  The entity type.
 * @param $bundle
 *  The bundle name.
 *
 * @return EntityValidateInterface | NULL
 *  The handler object if found, or NULL.
 */
function entity_validator_get_validator_handler($entity_type, $bundle) {
  $plugin_name = $entity_type . '__' . $bundle;
  $plugin = entity_validator_get_validator_plugin($plugin_name);

  if (!$class = ctools_plugin_load_class('entity_validator', 'validator', $plugin_name, 'class')) {
    return NULL;
  }

  $handler = new $class($plugin);
  return $handler;
}

/**
 * Implements hook_form_alter().
 */
function entity_validator_form_alter(&$form, &$form_state, $form_id) {
  // Verify we have the entity and the entity type in the form.
  if (empty($form['#entity']) || empty($form['#entity_type'])) {
    return;
  }

  // Checking that we have a handler for the current entity.
  $wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#entity']);
  if (!$handler = entity_validator_get_validator_handler($form['#entity_type'], $wrapper->getBundle())) {
    return;
  }

  // Add information to the validation handler.
  $form_state['#validator_handler'] = $handler;
  $form_state['#wrapper'] = $wrapper;
  $form['#validate'][] = 'entity_validator_validate_form';
}

/**
 * Validate handler for validating an entity before the form will save it to the
 * DB.
 */
function entity_validator_validate_form($form, &$form_state) {
  /** @var EntityValidateBase $handler */
  $handler = $form_state['#validator_handler'];

  /** @var EntityMetadataWrapper $wrapper */
  $wrapper = $form_state['#wrapper'];

  entity_form_submit_build_entity($form['#entity_type'], $form['#entity'], $form, $form_state);

  $wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#entity']);
  $handler->validate($form['#entity']);

  form_set_error('a', 'a');
}
