<?php

/**
 * @file
 * Contains EntityValidatorTestCase.
 */

class EntityValidatorTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Validate entity',
      'description' => 'Test the validation on an entity.',
      'group' => 'Entity validator',
    );
  }

  function setUp() {
    parent::setUp('entity_validator', 'entity_validator_example', 'image');

    // Create the article and attach the field image.
    $this->drupalCreateContentType(array('name' => 'article'));

    $instance = field_info_instance('node', 'field_image', 'article');
    $instance['settings'] = array(
      'file_directory' => 'field/image',
      'file_extensions' => 'pdf',
      'max_filesize' => '',
      'max_resolution' => '39X19',
      'min_resolution' => '41X21',
      'alt_field' => TRUE,
      'title_field' => '',
      'default_image' => '',
    );

    field_update_instance($instance);

    // Add multiple field.
    $field = array(
      'field_name' => 'field_text_multiple',
      'type' => 'text',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);

    $instance = array(
      'entity_type' => 'node',
      'bundle' => 'article',
      'field_name' => 'field_text_multiple',
      'required' => TRUE,
      'widget' => array(
        'type' => 'textfield',
      ),
    );
    field_create_instance($instance);
  }

  /**
   * Test the validation on an entity.
   */
  function testValidate() {
    $value[] = array('value' => 'First value');
    $value[] = array('value' => 'Second value');
    $value[] = array('value' => 'Third value');
    $value[] = array();
    $file = $this->createImage();

    $values = array(
      'type' => 'article',
      'uid' => 0,
    );
    $node = entity_create('node', $values);
    $handler = entity_validator_get_validator_handler('node', 'article');
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_image->set(array('fid' => $file->fid));
    $wrapper->field_text_multiple->set($value);

    try {
      $handler->validate($node);
    }
    catch (\EntityValidatorException $e) {
      $this->pass('Exception "\EntityValidatorException" was thrown.');
    }
    catch (\Exception $e) {
      $this->fail('Exception was not of type "\EntityValidatorException".');
    }

    // Silent mode.
    $result = $handler->validate($node, TRUE);
    $this->assertFalse($result, 'Validate in silent mode did not throw an exception.');

    $result = $handler->getErrors(FALSE);
    $expected_result = array(
      'title' => array(
        array(
          'message' => 'The @field should have the word "Drupal".',
          'params' => array(
            '@field' => 'title',
          ),
        ),
        array(
          'message' => 'The field @field cannot be empty.',
          'params' => array(
            '@field' => 'title',
          ),
        ),
      ),
      'field_image' => array(
        array(
          'message' => 'The width of the image(@width) is bigger then the allowed size(@max-width)',
          'params' => array(
            '@width' => 40,
            '@height' => 20,
            '@max-width' => '19',
            '@max-height' => '39',
            '@field' => 'field_image',
          ),
        ),
        array(
          'message' => 'The height of the image(@height) is bigger then the allowed size(@min-height)',
          'params' => array(
            '@width' => 40,
            '@height' => 20,
            '@max-width' => '19',
            '@max-height' => '39',
            '@min-width' => '21',
            '@min-height' => '41',
            '@field' => 'field_image',
          ),
        ),
        array(
          'message' => 'The file (@file-name) extension (@extension) did not match the allowed extensions: @extensions',
          'params' => array(
            '@file-name' => 'image-test.png',
            '@extension' => 'png',
            '@extensions' => 'pdf',
            '@field' => 'field_image',
          ),
        ),
      ),
      'field_text_multiple' => array(
        array(
          'message' => 'The delta @delta cannot be empty.',
          'params' => array(
            '@delta' => 3,
            '@field' => 'field_text_multiple',
          ),
        ),
      ),
      'body' => array(
        array(
          'message' => 'The @field should have the word "Drupal".',
          'params' => array(
            '@field' => 'body',
          ),
        ),
        array(
          'message' => 'The value @value is invalid for the field @field.',
          'params' => array(
            '@value' => '',
            '@field' => 'body',
          ),
        ),
        array(
          'message' => 'The field @field cannot be empty.',
          'params' =>
            array(
              '@field' => 'body',
            ),
        ),
      ),
    );
    $this->assertEqual($result, $expected_result, 'The silent mode returned the expected results.');
  }

  /**
   * Create an image for testing the image validator.
   *
   * @return stdClass
   *  The field object.
   */
  private function createImage() {
    $files = $this->drupalGetTestFiles('image');
    $file = reset($files);

    $source = new stdClass();
    $source->uri = $file->uri;
    $source->uid = 1;
    $source->filemime = 'image/' . pathinfo($file->uri, PATHINFO_EXTENSION);
    $source->filename = basename($file->uri);
    $file = file_save($source);

    return $file;
  }
}
