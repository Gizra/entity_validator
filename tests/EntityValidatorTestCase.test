<?php

/**
 * @file
 * Contains EntityValidatorTestCase.
 */

class EntityValidatorTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Validate exception',
      'description' => 'Test the validation on an entity.',
      'group' => 'Entity validator',
    );
  }

  function setUp() {
    parent::setUp('entity_validator', 'entity_validator_example');
  }

  /**
   * Test the validation on an entity.
   */
  function testValidate() {
    $values = array(
      'type' => 'article',
      'uid' => 0,
    );
    $node = entity_create('node', $values);
    try {
      entity_validator_validate_entity('node', $node);
    }
    catch (\EntityValidatorException $e) {
      $this->pass('Exception "\EntityValidatorException" was thrown.');
    }
    catch (\Exception $e) {
      $this->fail('Exception was not of type "\EntityValidatorException".');
    }

    // Silent mode.
    $result = entity_validator_validate_entity('node', $node, TRUE);
    $this->assertFalse($result, 'Validate in silent mode did not throw an exception.');

    $handler = entity_validator_get_validator_handler('node', 'article');
    $handler->validate($node, TRUE);
    $result = $handler->getErrors(FALSE);
    $expected_result = array (
      'title' => array(
        array(
          'message' => 'The field @field cannot be empty.',
          'params' => array(
            '@field' => 'title',
          ),
        ),
      ),
      'author' => array(
        array(
          'message' => 'The author of the content must be an authenticated user.',
          'params' => array(
            '@field' => 'author',
          ),
        ),
      ),
    );
    $this->assertEqual($result, $expected_result, 'The silent mode returned the expected results.');
  }
}
